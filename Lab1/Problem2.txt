Problem 2. Brute Force Solution. Formulate your own procedure for solving the SubsetSum
Problem. Think of it as a Java method subsetsum that accepts as input S, k, and outputs a
subset T of S with the property that the sum of the si in T is k if such a T exists, or null if no
such T can be found. (A non-null return value can be thought of as a return of “true” and a null
return value signifies “false.”) Implement your idea in Java code.


=>
package com.kush.algorithmassignments;

import java.util.ArrayList;
import java.util.List;

public class SubsetSum {

    public static List<Integer> subsetSum(List<Integer> list, int k) {
        List<Integer> result = new ArrayList<>();
        if (findSubset(list, 0, k, result)) {
            return result;
        }
        return null;
    }

    private static boolean findSubset(List<Integer> list, int index, int target, List<Integer> subset) {
        if (target == 0) {
            return true;
        }
        if (index >= list.size() || target < 0) {
            return false;
        }

        subset.add(list.get(index));
        if (findSubset(list, index + 1, target - list.get(index), subset)) {
            return true;
        }
        subset.remove(subset.size() - 1);
        return findSubset(list, index + 1, target, subset);
    }

    public static void main(String[] args) {
        List<Integer> list = List.of(3, 34, 4, 12, 5, 2);
        int k = 9;

        List<Integer> subset = subsetSum(list, k);
        if (subset != null) {
            System.out.println("Subset found: " + subset);
        } else {
            System.out.println("No subset found.");
        }
    }
}

